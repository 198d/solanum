#!/usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require 'optparse'
require 'solanum'

$options = {
  riemann_host: nil,
  riemann_port: 5555,
  interval: 5,
  verbose: false,
}

$defaults = {
  host: %x{hostname}.chomp,
  tags: [],
  ttl: 10,
}

def fail(msg, code=1)
  STDERR.puts(msg)
  exit code
end

def log(msg)
  puts "%s %s" % [Time.now.strftime("%H:%M:%S"), msg] if $options[:verbose]
end

# Parse command-line options.
options = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] <monitor config> [monitor config] ..."
  opts.separator ""
  opts.separator "Event Attributes:"
  opts.on(      '--host HOST', "Event hostname (default: #{$defaults[:host]})") {|v| $defaults[:host] = v }
  opts.on('-a', '--attribute KEY=VAL', "Attribute to add to the event (may be given multiple times)") {|attr| k,v = attr.split(/=/); if k and v then $defaults[k.intern] = v end }
  opts.on('-t', '--tag TAG', "Tag to add to events (may be given multiple times)") {|v| $defaults[:tags] << v }
  opts.on(      '--ttl SECONDS', "Default TTL for events (default: #{$options[:ttl]})") {|v| $defaults[:ttl] = v.to_i }
  opts.separator ""
  opts.separator "General Options:"
  opts.on(      '--riemann-host HOST', "Riemann host to report events to") {|v| $options[:riemann_host] = v }
  opts.on(      '--riemann-port PORT', "Riemann port (default: #{$options[:riemann_port]})") {|v| $options[:riemann_port] = v.to_i }
  opts.on('-i', '--interval SECONDS', "Seconds between updates (default: #{$options[:interval]})") {|v| $options[:interval] = v.to_i }
  opts.on('-v', '--verbose', "Print additional information to stdout") { $options[:verbose] = true }
  opts.on('-h', '--help', "Displays usage information") { print opts; exit }
end
options.parse!

# Check usage.
fail options if ARGV.empty?



##### MONITORING CONFIGS #####

$solanum = Solanum.new(ARGV)
fail "No sources loaded!" if $solanum.sources.empty?

if $options[:riemann_host]
  begin
    require 'riemann/client'
  rescue LoadError
    fail "ERROR: could not load Riemann client library! `gem install riemann-client` to enable reporting"
  end

  $riemann = Riemann::Client.new(host: $options[:riemann_host], port: $options[:riemann_port])
end



##### REPORT LOOP #####

trap "SIGINT" do
  exit
end

loop do
  $solanum.collect!
  events = $solanum.build_events($defaults)

  events.each do |event|
    if $options[:verbose] || $riemann.nil?
      puts "%-40s %5s (%s) %s" % [
        event[:service], event[:metric],
        event[:state].nil? ? "--" : event[:state],
        event.inspect
      ]
    end

    $riemann << event if $riemann
  end

  sleep $options[:interval]
end
