#!/usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require 'optparse'
require 'solanum'

$options = {
  period: 10,
}

$defaults = {
  host: %x{hostname --fqdn}.chomp,
  tags: [],
  ttl: 60,
}

def fail(msg, code=1)
  STDERR.puts(msg)
  exit code
end

# Parse command-line options.
options = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] <config.yml> [config2.yml ...]"
  opts.separator ""
  opts.separator "Event Attributes:"
  opts.on(      '--host HOST', "Event hostname (default: #{$defaults[:host]})") {|v| $defaults[:host] = v }
  opts.on('-a', '--attribute KEY=VAL', "Attribute to add to every event (may be given multiple times)") {|attr| k,v = attr.split(/=/); if k and v then $defaults[k.intern] = v end }
  opts.on('-t', '--tag TAG', "Tag to add to events (may be given multiple times)") {|v| $defaults[:tags] << v }
  opts.on(      '--ttl SECONDS', "Default TTL for events (default: #{$defaults[:ttl]})") {|v| $defaults[:ttl] = v.to_i }
  opts.separator ""
  opts.separator "General Options:"
  opts.on('-p', '--period SECONDS', "Seconds between updates (default: #{$options[:period]})") {|v| $options[:period] = v.to_i }
  opts.on('-h', '--help', "Displays usage information") { print opts; exit }
end
options.parse!

# Check usage.
fail options if ARGV.empty?

# Construct monitoring system.
$solanum = Solanum.new(ARGV)
fail "No sources loaded!" if $solanum.sources.empty?

# Handle ^C interrupts gracefully.
trap "SIGINT" do
  exit
end

# Scheduling loop.
$solanum.run!
